<?php

/*
 * FileSender www.filesender.org
 * 
 * Copyright (c) 2009-2012, AARNet, Belnet, HEAnet, SURFnet, UNINETT
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * *    Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * *    Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 * *    Neither the name of AARNet, Belnet, HEAnet, SURFnet and UNINETT nor the
 *     names of its contributors may be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// Require environment (fatal)
if (!defined('FILESENDER_BASE'))
    die('Missing environment');

/**
 * Statistics functions holder
 */
class Statistics {
    /**
     * Build statistics (cron)
     * 
     * @return array
     */
    public static function dailyBuild() {
        // Compile statistics for yesterday
        $statistics = array();
        
        $yesterday = date('Y-m-d', strtotime('yesterday'));
        $statistics['active_users'] = count(User::all('last_activity = :yesterday', array(':yesterday' => $yesterday)));
        
        foreach(StatLog::all('DATE(created) = :yesterday', array(':yesterday' => $yesterday)) as $log) { // TODO pgsql compliant ?
            if(!array_key_exists($log->event, $statistics))
                $statistics[$log->event] = array('count' => 0);
            
            $statistics[$log->event]['count']++;
            
            if(!$log->size) continue;
            
            if(!array_key_exists('size', $statistics[$log->event]))
                $statistics[$log->event]['size'] = 0;
            
            $statistics[$log->event]['size'] += $log->size;
        }
        
        self::store('daily', $statistics);
        
        if(date('dow') == '0') { // TODO detect fdow
            // Compile statistics for last week
            $statistics = array();
            
            for($day=strtotime('-8 day'); $day<=strtotime('yesterday'); $day+=24*3600) {
                try {
                    foreach(self::get('daily', $day) as $data => $counters) {
                        // TODO
                    }
                } catch(StatisticsNoDataException $e) {}
            }
        }
        
        // TODO monthly
    }
    
    /**
     * Store computed statistics
     * 
     * @param string $range "daily", "weekly", "monthly"
     * @param array $statistics
     */
    private static function store($range, $statistics) {
        switch($range) {
            case 'daily': $name = 'daily_'.date('Y_m_d'); break;
            case 'weekly': $name = 'weekly_'.date('Y_w'); break;
            case 'monthly': $name = 'monthly_'.date('Y_m'); break;
            default: throw new StatisticsBadRangeException($range);
        }
        
        $path = FILESENDER_BASE.'/log/statistics/'.$name.'.json';
        if($fh = fopen($path, 'w')) {
            fwrite($fh, json_encode($statistics));
            fclose($fh);
        } else throw new CoreCannotWriteFileException($path);
    }
    
    /**
     * Get statistics
     * 
     * @param string $range "daily", "weekly", "monthly"
     * @param mixed $date timestamp or strtotime compatible string
     * 
     * @return array
     */
    private static function get($range = 'daily', $date = null) {
        if(is_null($date)) $date = time();
        
        $timestamp = is_int($date) ? $date : strtotime($date);
        
        if(!$timestamp) throw new StatisticsBadDateException($date);
        
        switch($range) {
            case 'daily': $name = 'daily_'.date('Y_m_d', $timestamp); break;
            case 'weekly': $name = 'weekly_'.date('Y_w', $timestamp); break;
            case 'monthly': $name = 'monthly_'.date('Y_m', $timestamp); break;
            default: throw new StatisticsBadRangeException($range);
        }
        
        $path = FILESENDER_BASE.'/log/statistics/'.$name.'.json';
        if(!file_exists($path)) throw new StatisticsNoDataException($range, $date);
        
        return (array)json_decode(file_get_contents($path));
    }
}


